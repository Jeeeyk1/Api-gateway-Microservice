server:
  port: 8080

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      routes:
        - id: auth-service
          uri: http://auth-service:8081
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: auth-service
                fallbackUri: forward:/fallback/auth
        
        - id: user-profile-service
          uri: http://user-profile-service:8082
          predicates:
            - Path=/api/v1/users/**
          filters:
            - AuthenticationFilter
            - name: CircuitBreaker
              args:
                name: user-profile-service
                fallbackUri: forward:/fallback/users
        
        - id: post-service
          uri: http://post-service:8083
          predicates:
            - Path=/api/v1/posts/**
          filters:
            - AuthenticationFilter
            - name: CircuitBreaker
              args:
                name: post-service
                fallbackUri: forward:/fallback/posts
        
        - id: image-validation-service
          uri: http://image-validation-service:8084
          predicates:
            - Path=/api/v1/validate/**
          filters:
            - AuthenticationFilter
            - name: CircuitBreaker
              args:
                name: image-validation
                fallbackUri: forward:/fallback/validation
      
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_UNIQUE
      
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins:
              - "http://localhost:3000"
              - "http://localhost:4200"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders:
              - "*"
            allowCredentials: true
            maxAge: 3600

#  redis:
#    host: ${REDIS_HOST:localhost}
#    port: ${REDIS_PORT:6379}
#    timeout: 2000ms
#    lettuce:
#      pool:
#        max-active: 8
#        max-idle: 8
#        min-idle: 0

jwt:
  secret: ${JWT_SECRET:YourSuperSecretKeyForJWTShouldBeAtLeast256BitsLongForHS256Algorithm}
  expiration: 900000 # 15 minutes
  refresh-expiration: 604800000 # 7 days

resilience4j:
  circuitbreaker:
    instances:
      auth-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
      user-profile-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
      post-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 50

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers
  health:
    circuitbreakers:
      enabled: true

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    io.github.resilience4j: DEBUG